import arcpy, os.path, random

path = r"C:\PythonWorkspace\PDProject"
arcpy.env.workspace = path

# Variables
bufferSize = "300 Meters"
threshold = 80
iterations = 5
backgroundBurglaries = 50

# Creates the feature class for the boundary
if arcpy.Exists("boundary.shp"):
    print "Boundary file exists"
else:
    arcpy.CreateFeatureclass_management(path, "boundary.shp", "POLYGON")

    # Create polygon of size 10km x 10km
    array = arcpy.Array([arcpy.Point(0, 0),
                         arcpy.Point(0, 10000),
                         arcpy.Point(10000, 10000),
                         arcpy.Point(10000, 0)
                         ])
    polygon = arcpy.Polygon(array)

    # Open an InsertCursor and insert polygon
    cursor = arcpy.da.InsertCursor("boundary.shp", ["SHAPE@"])
    cursor.insertRow([polygon])
    del cursor
    print "Boundary file created"

# Creates the feature class for the burglaries
if arcpy.Exists("burglaries.shp"):
    arcpy.DeleteFeatures_management("burglaries.shp")
    print "Burglaries file exists"
else:
    arcpy.CreateFeatureclass_management(path, "burglaries.shp", "POINT")
    arcpy.AddField_management("burglaries.shp", "ITER", "SHORT")
    arcpy.AddField_management("burglaries.shp", "TYPE", "TEXT")
    print "Burglaries file created"

# Creates the feature class for the buffers
if arcpy.Exists("buffers.shp"):
    arcpy.DeleteFeatures_management("buffers.shp")
    print "Buffers file exists"
else:
    arcpy.CreateFeatureclass_management(path, "buffers.shp", "POLYGON")
    arcpy.AddField_management("buffers.shp", "ITER", "SHORT")
    print "Buffers file created"

# Function to add random points within a boundary and append to the burglaries shape file
# Note the interim file must be separately deleted before it can be reused
def randomPoints(interimName, boundary, numPoints, iterVal, pointType):
    # Creates the random points
    arcpy.CreateRandomPoints_management(path, interimName, boundary, "", numPoints)
    arcpy.AddField_management(interimName, "ITER", "SHORT")
    arcpy.AddField_management(interimName, "TYPE", "TEXT")

    # Updates the fields in the table
    with arcpy.da.UpdateCursor(interimName, ["ITER", "TYPE"]) as cursor:
        for row in cursor:
            row[0] = iterVal
            row[1] = pointType
            cursor.updateRow(row)

    # Adds the subsequent points into the burglaries.shp class that will contain all burglaries        
    arcpy.Append_management(interimName, "burglaries.shp", "NO_TEST")

    
# Creates one burglary 'zone'
iteration = 1
while iteration <= iterations:

    # Creates the first random burglary point
    randomPoints("initPoint.shp", "boundary.shp", 1, iteration, "INITIAL")
    
    # Creates the buffer around the initial point
    arcpy.Buffer_analysis("initPoint.shp", "initBuff.shp", bufferSize)

    # Adds the buffer into the buffers.shp class that will contain all buffers
    arcpy.Append_management("initBuff.shp", "buffers.shp", "NO_TEST")
    
    # Delete the initial point so the class can be reused
    arcpy.Delete_management("initPoint.shp")

    # Calculate number of further burglaries
    subsequent = 0
    while random.randint(0, 100) < threshold:
        subsequent += 1

    print "Iteration " + str(iteration) + " has " + str(subsequent + 1) + " burglaries."

    if subsequent != 0:
        # Generate further burglaries in area
        randomPoints("subsPoint.shp", "initBuff.shp", subsequent, iteration, "SECONDARY")
        
        # Delete the subsequent points so the class can be reused
        arcpy.Delete_management("subsPoint.shp")

    # Delete the initial buffer so the class can be reused
    arcpy.Delete_management("initBuff.shp")

    iteration += 1

# Creates the background burglaries (i.e. random noise)
randomPoints("randomNoise.shp", "boundary.shp", backgroundBurglaries, 0, "BACKGROUND")

# Delete the subsequent points so the class can be reused
arcpy.Delete_management("randomNoise.shp")
