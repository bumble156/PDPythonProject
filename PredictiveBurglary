import arcpy, os.path, random

path = r"C:\PythonWorkspace\PDProject"
arcpy.env.workspace = path

# Variables
bufferSize = "300 Meters"
threshold = 80
iterations = 10

# Creates the feature class for the boundary
if arcpy.Exists("boundary.shp"):
    print "Boundary file exists"
else:
    arcpy.CreateFeatureclass_management(path, "boundary.shp", "POLYGON")

    # Create polygon of size 10km x 10km
    array = arcpy.Array([arcpy.Point(0, 0),
                         arcpy.Point(0, 10000),
                         arcpy.Point(10000, 10000),
                         arcpy.Point(10000, 0)
                         ])
    polygon = arcpy.Polygon(array)

    # Open an InsertCursor and insert polygon
    cursor = arcpy.da.InsertCursor("boundary.shp", ["SHAPE@"])
    cursor.insertRow([polygon])
    del cursor
    print "Boundary file created"

# Creates the feature class for the burglaries
if arcpy.Exists("burglaries.shp"):
    arcpy.DeleteFeatures_management("burglaries.shp")
    print "Burglaries file exists"
else:
    arcpy.CreateFeatureclass_management(path, "burglaries.shp", "POINT")
    arcpy.AddField_management("burglaries.shp", "CID", "LONG", "10")
    arcpy.DeleteField_management("burglaries.shp", "Id")
    print "Burglaries file created"

# Creates the feature class for the buffers
if arcpy.Exists("buffers.shp"):
    arcpy.DeleteFeatures_management("buffers.shp")
    print "Buffers file exists"
else:
    arcpy.CreateFeatureclass_management(path, "buffers.shp", "POLYGON")
    arcpy.AddField_management("buffers.shp", "CID", "LONG", "10")
    arcpy.AddField_management("buffers.shp", "BUFF_DIST", "DOUBLE")
    arcpy.AddField_management("buffers.shp", "ORIG_FID", "LONG", "10")
    arcpy.DeleteField_management("buffers.shp", "Id")
    print "Buffers file created"

## Creates one burglary 'zone'
iteration = 0
while iteration < iterations:
    # Creates the first random burglary point
    arcpy.CreateRandomPoints_management(path, "initPoint", "boundary.shp", "", 1) 

    # Adds the initial point into the burglaries.shp class that will contain all burglaries
    arcpy.Append_management("initPoint.shp", "burglaries.shp", "TEST")

    # Creates the buffer around the initial point
    arcpy.Buffer_analysis("initPoint.shp", "initBuff.shp", bufferSize)

    # Adds the buffer into the buffers.shp class that will contain all buffers
    arcpy.Append_management("initBuff.shp", "buffers.shp", "TEST")

    ##TODO: Add in type field to store type of burglary
    
    ## Delete the initial point so the class can be reused
    arcpy.Delete_management("initPoint.shp")

    ## Calculate number of further burglaries
    subsequent = 0
    while random.randint(0, 100) < threshold:
        subsequent += 1

    print "Iteration " + str(iteration + 1) + " has " + str(subsequent + 1) + " burglaries."

    if subsequent != 0:
        ## Generate further burglaries in area
        arcpy.CreateRandomPoints_management(path, "subsPoint", "initBuff.shp", "", subsequent) 
        arcpy.Append_management("subsPoint.shp", "burglaries.shp", "TEST")

        ## Delete the subsequent points so the class can be reused
        arcpy.Delete_management("subsPoint.shp")

    ## Delete the initial buffer so the class can be reused
    arcpy.Delete_management("initBuff.shp")

    iteration += 1
    

